{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-for-carsdataflow"
		},
		"AzureSqlDatabase1_ls_for_SQLdb_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase1_ls_for_SQLdb'"
		},
		"ls_for_AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_for_AzureDataLakeStorage1'"
		},
		"AzureSqlDatabase1_ls_for_SQLdb_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "serverforcarsdataflow.database.windows.net"
		},
		"AzureSqlDatabase1_ls_for_SQLdb_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "databaseforcarsdataflow"
		},
		"AzureSqlDatabase1_ls_for_SQLdb_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "carsdataflowadmin"
		},
		"HttpServer1_github_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/"
		},
		"ls_for_AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsforcarsdataflow.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1_ls_for_SQLdb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_ls_for_SQLdb_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_ls_for_SQLdb_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_ls_for_SQLdb_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_ls_for_SQLdb_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpServer1_github')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServer1_github_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_for_AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_for_AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_for_AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1_Sink_SQLDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1_ls_for_SQLdb",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Branch_ID",
						"type": "varchar"
					},
					{
						"name": "Dealer_ID",
						"type": "varchar"
					},
					{
						"name": "Model_ID",
						"type": "varchar"
					},
					{
						"name": "Revenue",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Units_Sold",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Date_ID",
						"type": "varchar"
					},
					{
						"name": "Day",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Month",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Year",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BranchName",
						"type": "varchar"
					},
					{
						"name": "DealerName",
						"type": "varchar"
					},
					{
						"name": "Product_Name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1_ls_for_SQLdb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1_source_from_http')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer1_github",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "wilson0990/de_project2_carsdataflow/refs/heads/main/Raw%20data/@{dataset().FileName}.csv",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HttpServer1_github')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Parquet1_adls')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_for_AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Carsdata",
						"fileSystem": "bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Branch_ID",
						"type": "UTF8"
					},
					{
						"name": "Dealer_ID",
						"type": "UTF8"
					},
					{
						"name": "Model_ID",
						"type": "UTF8"
					},
					{
						"name": "Revenue",
						"type": "INT32"
					},
					{
						"name": "Units_Sold",
						"type": "INT32"
					},
					{
						"name": "Date_ID",
						"type": "UTF8"
					},
					{
						"name": "Day",
						"type": "INT32"
					},
					{
						"name": "Month",
						"type": "INT32"
					},
					{
						"name": "Year",
						"type": "INT32"
					},
					{
						"name": "BranchName",
						"type": "UTF8"
					},
					{
						"name": "DealerName",
						"type": "UTF8"
					},
					{
						"name": "Product_Name",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_for_AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IngestionPipeline1_for_copying_initial_data_from_git_to_SQLdb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will run for the first time only",
				"activities": [
					{
						"name": "Copy data1 - initial run",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Branch_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Branch_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Dealer_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Dealer_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Model_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Model_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Revenue",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Units_Sold",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Units_Sold",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Date_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Date_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Day",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Day",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Month",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Month",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Year",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Year",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "BranchName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BranchName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DealerName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DealerName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Product_Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product_Name",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText1_source_from_http",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "Incremental_Car_Sales_Data_2"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable1_Sink_SQLDB",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "CarsData"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "cars-dataflow-adf-pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-21T12:38:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1_source_from_http')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1_Sink_SQLDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IngestionPipeline2_for_copying_rawdata_from_github_to_sqldb_incrementally')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This Pipeline Copies raw data from GitHub source to azure SQL database - Dynamically",
				"activities": [
					{
						"name": "Copy data1 for incremental load",
						"description": "Copy activity for GitHub to Azure SQL database for incremental data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1 for to get LastLoadDateID",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Lookup2 for finding maximum LastLoadDateId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * \nFROM [dbo].[CarsData] \nWHERE \n    Date_Id > '@{activity('Lookup1 for to get LastLoadDateID').output.value[0].LastLoadDateId}'\n    AND Date_Id <= '@{activity('Lookup2 for finding maximum LastLoadDateId').output.firstRow.MaxDateId}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable1_Sink_SQLDB",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "CarsData"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_Parquet1_adls",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Lookup1 for to get LastLoadDateID",
						"description": "Lookup1 for to retrieve the Last Load Date ID from GetLastLoadDateID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "Select LastLoadDateId from [dbo].[LastLoadTracking]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1_Sink_SQLDB",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "LastLoadTracking"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Lookup2 for finding maximum LastLoadDateId",
						"description": "This Lookup helps to get the max or current last Load date Id",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select max(Date_ID) as MaxDateId from [dbo].[CarsData];",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1_Sink_SQLDB",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "CarsData"
								}
							}
						}
					},
					{
						"name": "Stored procedure1 to update the LastLoadDateID",
						"description": "Once data is sent to SQL Database, this stored procedure will update the LastLoadDateId with NewLastLoadDateId",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1 for incremental load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[UpdateLastLoadDateId]",
							"storedProcedureParameters": {
								"NewLastLoadDateId": {
									"value": {
										"value": "@{activity('Lookup2 for finding maximum LastLoadDateId').output.firstRow.MaxDateId }",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1_ls_for_SQLdb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "cars-dataflow-adf-pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-21T15:28:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1_Sink_SQLDB')]",
				"[concat(variables('factoryId'), '/datasets/ds_Parquet1_adls')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1_ls_for_SQLdb')]"
			]
		}
	]
}